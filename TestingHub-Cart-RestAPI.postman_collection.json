{
	"info": {
		"_postman_id": "f0a7d4c5-84a3-4f42-a349-88f5edd7aa81",
		"name": "TestingHub-Cart-RestAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "token",
			"item": [
				{
					"name": "Get Token - Set token variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* We can write post script and set variable here\" */",
									"",
									"var jsonResponse = pm.response.json()",
									"",
									"// Get Access Token ",
									"var access_token = jsonResponse.access",
									"",
									"// Get Refresh Token",
									"var refresh_token = jsonResponse.refresh",
									"",
									"// Set Access token in environment variable",
									"pm.environment.set(\"access_token\",access_token)",
									"",
									"// Set Refresh Token in environment variable",
									"pm.environment.set(\"refresh_token\",refresh_token)",
									"",
									"",
									"// Check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test1@user.com\",\n    \"password\": \"test1@user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/* Multiple Assertion Check */",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status code is 200, access key exist and not null\",  () => {",
									"    ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"access\");",
									"    pm.expect(jsonData.access).not.null;",
									"   ",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/refresh/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/* Multiple Assertion Check */",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Invaild Token message is displayed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.eql(\"Token is invalid or expired\");",
									"});",
									"",
									"pm.test(\"Code is token_not_valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"token_not_valid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh\": \"{{$randomUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/refresh/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"String access is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"access\");",
									"});",
									"",
									"pm.test(\"String refresh is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"refresh\");",
									"});",
									"",
									"pm.test(\"Access Token is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access).not.null;",
									"});",
									"",
									"pm.test(\"Refresh Token is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.refresh).not.null;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test1@user.com\",\n    \"password\": \"test1@user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - No Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Email Required message is displayed\", function () {",
									"    pm.expect(jsonData.email[0]).to.eql(\"This field is required.\");",
									"});",
									"",
									"pm.test(\"Password Required message is displayed\", function () {",
									"    pm.expect(jsonData.password[0]).to.eql(\"This field is required.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation message is displayed for invalid credentials\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.non_field_errors[0]).to.eql(\"Unable to log in with provided credentials.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - Invalid Methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405 - Method Not Allowed\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Validation details is displayed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.eql(\"Method \\\"GET\\\" not allowed.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test1@user.com\",\n  \"password\": \"test1@user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "Get Product Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get JSON Body",
									"var body = pm.response.json();",
									"",
									"// Getting Environment Variable",
									"var env = pm.environment.get(\"env\")",
									"",
									"// Verify the environment is test",
									"pm.test(\"environment to be test\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"test\");",
									"});",
									"",
									"// Status Code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(pm.environment.get(\"env\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/category/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"category",
								""
							]
						}
					},
					"response": [
						{
							"name": "Get Product Category Example",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl}}/api/v1/products/category/",
									"protocol": "https",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"category",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Allow",
									"value": "GET, HEAD, OPTIONS"
								},
								{
									"key": "Content-Language",
									"value": "en"
								},
								{
									"key": "Content-Length",
									"value": "183"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Nov 2022 06:12:36 GMT"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Server",
									"value": "uvicorn"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=60; includeSubDomains; preload"
								},
								{
									"key": "Vary",
									"value": "Accept, Accept-Language, Origin"
								},
								{
									"key": "Www-Authenticate",
									"value": "Bearer realm=\"api\""
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Given token not valid for any token type\",\n    \"code\": \"token_not_valid\",\n    \"messages\": [\n        {\n            \"token_class\": \"AccessToken\",\n            \"token_type\": \"access\",\n            \"message\": \"Token is invalid or expired\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Product List Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/list/?category_id=12&name=&page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"list",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "12"
								},
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/products/detail/samsung-galaxy-s22-ultra-1/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"products",
								"detail",
								"samsung-galaxy-s22-ultra-1",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer",
			"item": [
				{
					"name": "Get Item in Cart",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/list-items-in-cart/?page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"list-items-in-cart",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to cart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": 17,\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/add-item-to-cart/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"add-item-to-cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item in Cart",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": 18,\n  \"quantity\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/remove-product-item/1/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"remove-product-item",
								"1",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "Get token - Options Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"access\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"refresh\");",
									"});",
									"",
									"pm.test(\"Access Token is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access).not.null;",
									"});",
									"",
									"pm.test(\"Refresh Token is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.refresh).not.null;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test1@user.com\",\n    \"password\": \"test1@user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Category - Global Variable",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/detail/{{productSlug}}/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"detail",
								"{{productSlug}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Passing Header - Authorization",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* Using Pre request to set request header */",
									"",
									"var authorization = \"Bearer \"+ pm.environment.get(\"access_token\")",
									"",
									"pm.request.headers.add({ key: \"Authorization\", value: authorization })"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/list-items-in-cart/?page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"list-items-in-cart",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Passing Header - Content Type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/list-items-in-cart/?page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"list-items-in-cart",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile - PUT Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"test\",\n  \"last_name\": \"test\",\n  \"phone_number\": \"2313123\",\n  \"city\": \"test\",\n  \"state\": \"test\",\n  \"country\": \"test\",\n  \"zip_code\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/users/update-user-profile/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"update-user-profile",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile - Passing Request Body as a File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"{{first_name}}\",\n  \"last_name\": \"{{last_name}}\",\n  \"phone_number\": \"2313123\",\n  \"city\": \"test\",\n  \"state\": \"test\",\n  \"country\": \"test\",\n  \"zip_code\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}api/v1/users/update-user-profile/",
							"protocol": "https",
							"host": [
								"{{baseurl}}api"
							],
							"path": [
								"v1",
								"users",
								"update-user-profile",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Workflow Example - Get Product Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var i = 0",
									"while(i<5){",
									"    postman.setNextRequest(\"Get Product List\")",
									"    console.log(\"this is iteration \"+ i)",
									"    i++",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/category/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"category",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Request Chaining - Product Details",
			"item": [
				{
					"name": "Get Product Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json()",
									"",
									"// Get Category ID",
									"var category_id = jsonResponse[0].id;",
									"console.log(category_id)",
									"",
									"",
									"// Set Category id ",
									"pm.environment.set(\"category_id\",category_id)",
									"",
									"// Check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"postman.setNextRequest(\"Get Product List\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/category/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"category",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setNextRequest(null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/products/detail/{{slug}}/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"products",
								"detail",
								"{{slug}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonResponse = pm.response.json();",
									"// Get Category ID",
									"var slug = jsonResponse.results[0].slug;",
									"console.log(slug)",
									"",
									"",
									"// Set Category id ",
									"pm.environment.set(\"slug\",slug) ",
									"",
									"postman.setNextRequest(\"Get Product Details\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/list/?category_id={{category_id}}&name=&page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"list",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{category_id}}"
								},
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Request Chaining - Cart Operation",
			"item": [
				{
					"name": "Get Token - Set token variable Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* We can write post script and set variable here\" */",
									"",
									"var jsonResponse = pm.response.json()",
									"",
									"// Get Access Token ",
									"var access_token = jsonResponse.access",
									"",
									"// Get Refresh Token",
									"var refresh_token = jsonResponse.refresh",
									"",
									"// Set Access token in environment variable",
									"pm.environment.set(\"access_token\",access_token)",
									"",
									"// Set Refresh Token in environment variable",
									"pm.environment.set(\"refresh_token\",refresh_token)",
									"",
									"",
									"// Check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setNextRequest(\"Get Item in Cart\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test1@user.com\",\n    \"password\": \"test1@user\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/jwt/token/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"jwt",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item in Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart is empty message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Cart Is Empty.\");",
									"});",
									"",
									"postman.setNextRequest(\"Get Product Category\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/list-items-in-cart/?page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"list-items-in-cart",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json()",
									"",
									"// Get Category ID",
									"var category_id = jsonResponse[0].id;",
									"console.log(category_id)",
									"",
									"",
									"// Set Category id ",
									"pm.environment.set(\"category_id\",category_id)",
									"",
									"// Check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"postman.setNextRequest(\"Get Product List\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/category/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"category",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonResponse = pm.response.json();",
									"// Get Category ID",
									"var product_id = jsonResponse.results[0].id",
									"console.log(product_id)",
									"",
									"",
									"// Set Category id ",
									"pm.environment.set(\"product_id\",product_id) ",
									"",
									"postman.setNextRequest(\"Add item to cart\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/products/list/?category_id={{category_id}}&name=&page=1&page_size=10",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"list",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{category_id}}"
								},
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"cart_product_quantity = 10;",
									"pm.environment.set(\"cart_product_quantity\",cart_product_quantity) "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success message is displayed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Item updated in cart\");",
									"});",
									"",
									"var jsonResponse = pm.response.json()",
									"",
									"var active_product_quantity_in_cart = jsonResponse.order_item.quantity;",
									"console.log(active_product_quantity_in_cart)",
									"var order_item_id  = jsonResponse.order_item.id",
									"",
									"pm.environment.set(\"active_product_quantity_in_cart\",0)",
									"pm.environment.set(\"update_quantity\",0)",
									"",
									"",
									"pm.environment.set(\"active_product_quantity_in_cart\",active_product_quantity_in_cart)",
									"pm.environment.set(\"order_item_id\",order_item_id)",
									"",
									"postman.setNextRequest(\"Update Item in Cart\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": {{product_id}},\n  \"quantity\": {{cart_product_quantity}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/add-item-to-cart/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"add-item-to-cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item in Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var update_quantity = 1",
									"",
									"pm.environment.set(\"update_quantity\", update_quantity)",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"var update_quantity =pm.environment.get(\"update_quantity\")",
									"console.log(\"Updated Quantity \", update_quantity)",
									"",
									"var active_product_quantity_in_cart = pm.environment.get(\"active_product_quantity_in_cart\")",
									"console.log(\"active quantity: \", active_product_quantity_in_cart)",
									"",
									"var actualQuantity = responseData.order_item.quantity",
									"var expectedQuantity = active_product_quantity_in_cart - update_quantity; ",
									"",
									"pm.test(\"Check for updated quantity\", function () {",
									"    pm.expect(expectedQuantity).to.eql(actualQuantity);",
									"});",
									"",
									"pm.environment.set(\"active_product_quantity_in_cart\",active_product_quantity_in_cart - update_quantity)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": {{product_id}},\n  \"quantity\": {{update_quantity}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/remove-product-item/{{order_item_id}}/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"remove-product-item",
								"{{order_item_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Cart - Delete All Item in Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Empty Cart Message should be displayed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Order item removed from cart sucessfully\");",
									"});",
									"",
									"postman.setNextRequest(\"Update Cart - Check After Deletion\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": {{product_id}},\n  \"quantity\": {{active_product_quantity_in_cart}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/remove-product-item/{{order_item_id}}/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"remove-product-item",
								"{{order_item_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Cart - Check After Deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Empty Cart Message should be displayed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"You do not have an active order\");",
									"});",
									"",
									"postman.setNextRequest(null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": {{product_id}},\n  \"quantity\": {{active_product_quantity_in_cart}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/buyer/remove-product-item/{{order_item_id}}/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"buyer",
								"remove-product-item",
								"{{order_item_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "New Changes in API",
			"item": [
				{
					"name": "Update User Profile - PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"\",\n  \"last_name\": \"\",\n  \"phone_number\": \"\",\n  \"city\": \"\",\n  \"state\": \"\",\n  \"country\": \"\",\n  \"zip_code\": \"3432\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/users/update-user-profile/",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"update-user-profile",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/tags",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://test.api.testamplify.io/api/v1/users/tags/1/delete/",
							"protocol": "https",
							"host": [
								"test",
								"api",
								"testamplify",
								"io"
							],
							"path": [
								"api",
								"v1",
								"users",
								"tags",
								"1",
								"delete",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}